{"ast":null,"code":"import { onBeforeMount, ref } from 'vue';\nexport default {\n  name: \"ClientList\",\n  data() {\n    return {\n      items: [] // Инициализация свойства items\n    };\n  },\n\n  mounted() {\n    // Ваш GET-запрос для получения данных\n    axios.get(apiUrl).then(response => {\n      this.items = response.data; // Назначение данных для свойства items\n    }).catch(error => {\n      console.error('Ошибка получения данных:', error);\n    });\n  }\n};\nconst items = ref([]);\nasync function fetchDataFromServer() {\n  await fetch(apiUrl.value).then(response => response.json).then(json => {\n    items.value = json;\n  });\n}\nonBeforeMount(() => {\n  fetchDataFromServer();\n});","map":{"version":3,"names":["onBeforeMount","ref","name","data","items","mounted","axios","get","apiUrl","then","response","catch","error","console","fetchDataFromServer","fetch","value","json"],"sources":["C:\\Users\\aser\\PhpstormProjects\\exercise2\\src\\views\\ClientList.vue"],"sourcesContent":["<template>\r\n  <table class=\"table\">\r\n    <thead>\r\n    <tr>\r\n      <th scope=\"col\">#</th>\r\n      <th scope=\"col\">Lastname</th>\r\n      <th scope=\"col\">Firstname</th>\r\n    </tr>\r\n    </thead>\r\n    <tbody>\r\n    <tr v-for=\"(item, index) in items\" :key=\"index\">\r\n      <td>{{ item.id }}</td>\r\n      <td>{{ item.last_name_doc }}</td>\r\n      <td>{{ item.firstt_name_doc }}</td>\r\n      <!-- Вывод других данных -->\r\n    </tr>\r\n    </tbody>\r\n  </table>\r\n</template>\r\n\r\n<script>\r\nimport {onBeforeMount, ref} from 'vue';\r\n\r\n\r\nexport default {\r\n  name: \"ClientList\",\r\n\r\n  data() {\r\n    return {\r\n      items: [] // Инициализация свойства items\r\n    };\r\n  },\r\n  mounted() {\r\n    // Ваш GET-запрос для получения данных\r\n    axios.get(apiUrl)\r\n        .then(response => {\r\n          this.items = response.data; // Назначение данных для свойства items\r\n        })\r\n        .catch(error => {\r\n          console.error('Ошибка получения данных:', error);\r\n        });\r\n  }\r\n}\r\n\r\nconst items = ref ([]);\r\n\r\n\r\nasync function fetchDataFromServer(){\r\n  await fetch(apiUrl.value)\r\n    .then((response) => response.json).then((json)=>{\r\n      items.value = json\r\n    })\r\n}\r\n\r\nonBeforeMount(() => {\r\n  fetchDataFromServer();\r\n})\r\n\r\n\r\n\r\n</script>\r\n\r\n\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":"AAqBA,SAAQA,aAAa,EAAEC,GAAG,QAAO,KAAK;AAGtC,eAAe;EACbC,IAAI,EAAE,YAAY;EAElBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAC,CAAE;IACZ,CAAC;EACH,CAAC;;EACDC,OAAOA,CAAA,EAAG;IACR;IACAC,KAAK,CAACC,GAAG,CAACC,MAAM,EACXC,IAAI,CAACC,QAAO,IAAK;MAChB,IAAI,CAACN,KAAI,GAAIM,QAAQ,CAACP,IAAI,EAAE;IAC9B,CAAC,EACAQ,KAAK,CAACC,KAAI,IAAK;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD,CAAC,CAAC;EACR;AACF;AAEA,MAAMR,KAAI,GAAIH,GAAE,CAAG,EAAE,CAAC;AAGtB,eAAea,mBAAmBA,CAAA,EAAE;EAClC,MAAMC,KAAK,CAACP,MAAM,CAACQ,KAAK,EACrBP,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACO,IAAI,CAAC,CAACR,IAAI,CAAEQ,IAAI,IAAG;IAC9Cb,KAAK,CAACY,KAAI,GAAIC,IAAG;EACnB,CAAC;AACL;AAEAjB,aAAa,CAAC,MAAM;EAClBc,mBAAmB,CAAC,CAAC;AACvB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}